name: Tests

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [ "self-hosted", "Windows" ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: cmd
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ..\Yagi -DCMAKE_BUILD_TYPE=Debug -DIDA_SDK_SOURCE_DIR=c:\work\idasdk76\idasdk76 -DBUILD_TESTS=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Debug

    - name: Test
      working-directory: ${{runner.workspace}}/build/tests
      shell: cmd
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -VVV -C Debug
